<launch>
  <!-- This launch file aims at providing a single environment for the training of DRL based intermediate planner -->
  <arg name="ns" />
  <!-- rlca teb drl -->
  <arg name="local_planner" default="teb" />
  <arg name="pretrain_mode" default="false" />
  <!-- Don't change it if you don't know what does it mean! -->
  <arg name="global_frame_id" value="map" />
  <arg name="odom_frame_id" value="$(arg ns)_odom" />
  <arg name="base_frame_id" value="$(arg ns)_footprint" />
  <arg name="include_global_planner" default="true" />
  <arg name="global_planner_active_mode"  default="true" />
  <arg name="map_path" />
  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_path)" ns="$(arg ns)">
    <!-- In multi-env training /clock not available, since we only want one map_server, it's clock topic is remapped to /clock -->
    <remap from="/clock" to="/$(arg ns)/clock" />
  </node>
  <!-- use fake localization-->
  <include file="$(find arena_bringup)/launch/sublaunch_training/fake_localization.launch">
    <arg name="ns" value="$(arg ns)" />
    <arg name="global_frame_id" value="$(arg global_frame_id)" />
    <arg name="odom_frame_id" value="$(arg odom_frame_id)" />
  </include>
  <!-- start plan manager -->
  <!-- used for sample subgoal from the global path, which will be treated as expert action -->
  <group if="$(arg pretrain_mode)">
    <include file="$(find arena_bringup)/launch/sublaunch_training/plan_manager.launch">
      <!-- only train_mode is false, otherwise subgoal is identical with global goal
            which is not wanted for training the waypoint generator.
      -->
      <arg name="ns" value="$(arg ns)" />
      <arg name="train_mode" value="false" />
      <arg name="global_frame_id" value="$(arg global_frame_id)" />
      <arg name="odom_frame_id" value="$(arg odom_frame_id)" />
      <arg name="base_frame_id" value="$(arg base_frame_id)" />
      <!-- 0.3 is robot's velocity 2 is plan zone for waypoint generator -->
      <!-- <arg name="look_ahead_distance"     default="$(eval  2 if arg('local_planner')!='None' else 0.3*2 ) "/>   meter, double -->
      <arg name="look_ahead_distance" default="0.6" /> <!-- meter, double-->
      <arg name="tolerance_approach" default="0.6" /> <!-- meter, double-->
      <!-- small value to make fsm change the state as soon as possible -->
      <arg name="timeout_goal" default="1" /> <!-- sec, double-->
      <arg name="timeout_subgoal" default="0.01" /> <!-- sec, double-->
      <!-- make use also make the modification in the file start_arena_flatland_waypoint.launch -->
      <!-- look_ahead_distance + outer ring circle < len_laser_beam -->
      <!-- sec, double -->
      <!-- we set it to a very small value to let plan manager plan the subgoal and publish it as soon as possible -->
      <!-- sec, double -->
    </include>
    <include file="$(find arena_bringup)/launch/sublaunch_training/intermediate_planner.launch">
      <arg name="ns" value="$(arg ns)" />
      <arg name="active_mode" value="$(arg global_planner_active_mode)"/>
    </include>
  </group>


  <include file="$(find arena_bringup)/launch/sublaunch_training/intermediate_planner.launch" if="$(arg include_global_planner)">
    <arg name="ns" value="$(arg ns)" />
  </include>

  <!-- in the normal training mode, the local planner we don't need plan manager, because the the goal is the reference position-->
  <!-- local planner get the waypoint by the topic "/move_base_simple/goal",
        -->
  <include file="$(find arena_bringup)/launch/sublaunch_training/move_base/move_base_$(arg local_planner).launch" unless="$(arg pretrain_mode)">
    <arg name="ns" value="$(arg ns)" />
  </include>

  <!-- use simulator -->
  <include file="$(find arena_bringup)/launch/sublaunch_training/flatland_simulator.launch">
    <arg name="ns" value="$(arg ns)" />
  </include>
  <!-- 
    <node pkg="arena_local_planner_drl" type="local_planner_deploy.py" name="local_planner_deploy" output="screen" ns="$(arg ns)">
      <remap from="/clock" to="/$(arg ns)/clock"/>
    </node> -->
</launch>